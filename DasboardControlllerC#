using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using InventoryAuditAPI.Models;
using InventoryAuditAPI.DAL;
using System.Threading;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Web;
using System.IO;
using System.Net.Http.Headers;

namespace InventoryAuditAPI.Controllers
{
    [RoutePrefix("api/Dashboard")]
    public class DashboardController : ApiController
    {
        private daDashboard dal;

        [Authorize]

        ////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////  GET Method REGION  //////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////
        ///
         #region Get Method Region

        [HttpGet]
        [Route("GetTransTag")]
        public IHttpActionResult GetTransTag([FromUri] DateTime Sdate, DateTime Edate, string Whscode)
        {
            try
            {
                dal = new daDashboard();
                List<object> model = dal.GetTransTag(Sdate, Edate, Whscode);
                return Ok(model);
            }
            catch (Exception ex)
            {
                var response = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent(ex.Message, System.Text.Encoding.UTF8, "text/plain"),
                    StatusCode = HttpStatusCode.InternalServerError,
                    ReasonPhrase = ex.Message
                };
                throw new HttpResponseException(response);
            }
        }

        [HttpGet]
        [Route("GetConsumptions")]
        public IHttpActionResult GetConsumptions([FromUri] DateTime Sdate, DateTime Edate, string Whscode)
        {
            try
            {
                dal = new daDashboard();
                List<object> model = dal.GetConsumptions(Sdate, Edate, Whscode);
                return Ok(model);
            }
            catch (Exception ex)
            {
                var response = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent(ex.Message, System.Text.Encoding.UTF8, "text/plain"),
                    StatusCode = HttpStatusCode.InternalServerError,
                    ReasonPhrase = ex.Message
                };
                throw new HttpResponseException(response);
            }
        }


        [HttpGet]
        [Route("GetDashboard")]
        public IHttpActionResult GetDashboard(string year, int month)
        {
            try
            {
                dal = new daDashboard();
                List<object> model = dal.GetDashboard(year, month);
                return Ok(model);
            }
            catch (Exception ex)
            {
                var response = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent(ex.Message, System.Text.Encoding.UTF8, "text/plain"),
                    StatusCode = HttpStatusCode.InternalServerError,
                    ReasonPhrase = ex.Message
                };
                throw new HttpResponseException(response);
            }
        }


        [HttpGet]
        [Route("Export")]
        public HttpResponseMessage Export(DateTime Sdate, DateTime Edate, string Whscode)
        {
            using (MemoryStream ms = daDashboard.Export(Sdate, Edate, Whscode))
            {
                HttpResponseMessage result = null;
                result = Request.CreateResponse(HttpStatusCode.OK);
                result.Content = new ByteArrayContent(ms.GetBuffer());
                result.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment");
                result.Content.Headers.ContentType = new MediaTypeHeaderValue("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                result.Content.Headers.ContentDisposition.FileName = string.Format("Pcounts_{0:yyyy-MM-dd_HH-mm-ss-fff}.xlsx", DateTime.Now);
                return result;



            }

        }

        #endregion


        ////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////  PUT Method REGION  //////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////
        ///
        #region PUT Method Region

        [HttpPut]
        [Route("PutStype")]
        public IHttpActionResult PutStype()
        {
            try
            {
                dal = new daDashboard();
                dal.PutStype();
                return Ok();
            }
            catch (Exception ex)
            {
                var response = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent(ex.Message, System.Text.Encoding.UTF8, "text/plain"),
                    StatusCode = HttpStatusCode.InternalServerError,
                    ReasonPhrase = ex.Message
                };
                throw new HttpResponseException(response);
            }
        }



        #endregion



    }
}
